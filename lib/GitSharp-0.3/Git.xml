<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GitSharp.Git</name>
    </assembly>
    <members>
        <member name="T:GitSharp.CLI.TextBuiltin">
            <summary>
            Abstract command which can be invoked from the command line.
            
            Commands are configured with a single "current" repository and then the
            execute(String[]) method is invoked with the arguments that appear
            after the subcommand.
            
            Command constructors should perform as little work as possible as they may be
            invoked very early during process loading, and the command may not execute
            even though it was constructed.
            </summary>
        </member>
        <member name="F:GitSharp.CLI.TextBuiltin.commandName">
            <summary>
            Name of the command in use
            </summary>
        </member>
        <member name="F:GitSharp.CLI.TextBuiltin.commandHelp">
            <summary>
            Website address of the command help file
            </summary>
        </member>
        <member name="F:GitSharp.CLI.TextBuiltin.requiresRepository">
            <summary>
            Specifies if the command requires a repository to execute
            </summary>
        </member>
        <member name="F:GitSharp.CLI.TextBuiltin.requiresRecursive">
            <summary>
            Specifies if the command requires an upward search for the git repository
            </summary>
        </member>
        <member name="F:GitSharp.CLI.TextBuiltin.argWalk">
            <summary>
            RevWalk used during command line parsing, if it was required.
            </summary>
        </member>
        <member name="F:GitSharp.CLI.TextBuiltin.arguments">
            <summary>
            Contains the remaining arguments after the options listed in the command line.
            </summary>
        </member>
        <member name="F:GitSharp.CLI.TextBuiltin.options">
            <summary>
            Custom OptionSet to allow special option handling rules such as --option dir
            </summary>
        </member>
        <member name="M:GitSharp.CLI.TextBuiltin.setCommandName(System.String)">
            <summary>
            Used by CommandCatalog and CommandRef to set the command name during initial creation.
            </summary>
            <param name="name">The command name.</param>
        </member>
        <member name="M:GitSharp.CLI.TextBuiltin.getCommandName">
            <summary>
            Used by CommandRef to get the command name during initial creation.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.TextBuiltin.setCommandHelp(System.String)">
            <summary>
            Used by CommandCatalog and CommandRef to set the website address of the command help during initial creation.
            </summary>
            <param name="cmdHelp">The website address of the command help.</param>
        </member>
        <member name="M:GitSharp.CLI.TextBuiltin.getCommandHelp">
            <summary>
            Used by CommandRef to get the command help website during initial creation.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.TextBuiltin.Init(GitSharp.Core.Repository,System.String)">
            <summary>
            Initializes a command for use including the repository and output support.
            </summary>
            <param name="repo">Specifies the repository to use.</param>
            <param name="path"></param>
        </member>
        <member name="M:GitSharp.CLI.TextBuiltin.Execute(System.String[])">
            <summary>
            Parses the command line and runs the corresponding subcommand 
            </summary>
            <param name="args">Specifies the command line arguments passed after the command name.</param>
        </member>
        <member name="M:GitSharp.CLI.TextBuiltin.ParseOptions(System.String[])">
            <summary>
            Parses the options for all subcommands and executes the corresponding code for each option.
            </summary>
            <param name="args">Specifies the string from the options to the end of the command line.</param>
            <returns>Returns the arguments remaining after the options on the command line. Often, these are directories or paths.</returns>
        </member>
        <member name="M:GitSharp.CLI.TextBuiltin.ParseOptions(System.String[],System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Parses the options for all subcommands and executes the corresponding code for each option. This function should only be used if supporting -- &amp;filepatterns>
            </summary>
            <param name="args">Specifies the string from the options to the end of the command line.</param>
            <param name="filePaths">Returns a list of files following the -- argument</param>
            <param name="remainingArguments">Returns the arguments remaining after the options on the command line. Often, these are directories or paths.</param>
            <returns>Returns the arguments remaining after the options on the command line. Often, these are directories or paths.</returns>
        </member>
        <member name="M:GitSharp.CLI.TextBuiltin.GetCommand">
            <summary>
            Returns the current command for lightweight referencing.
            </summary>
            <returns>Returns this command.</returns>
        </member>
        <member name="M:GitSharp.CLI.TextBuiltin.Run(System.String[])">
            <summary>
            Provides an abstract layer to perform the action of this command.
            This method should only be invoked by the  Execute(String[] args) method.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.TextBuiltin.OnlineHelp">
            <summary>
            Opens the default webbrowser to display the command specific help.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.TextBuiltin.die(System.String)">
            <summary>
            Generic method used to return an exception during fatal conditions. 
            </summary>
            <param name="why">Specifies the textual explanation of why the exception was thrown.</param>
            <returns>Returns a runtime exception the caller is expected to throw.</returns>
        </member>
        <member name="P:GitSharp.CLI.TextBuiltin.RequiresRepository">
            <summary>
            Determine if the command requires a repository
            </summary>
        </member>
        <member name="P:GitSharp.CLI.TextBuiltin.RequiresRecursive">
            <summary>
            Specifies if the command requires an upward search for the git repository
            </summary>
        </member>
        <member name="M:NDesk.Options.OptionSet.Parse(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Internal Use Only. Used by NDesk.OptionSetTest for unit testing purposes of OptionSet.Parse. 
            </summary>
        </member>
        <member name="M:NDesk.Options.OptionSet.Parse(System.String[],System.Collections.Generic.List{System.String}@)">
            <summary>
            Used to parse the options (aka arguments) denoted by a "-" or "--" in the command line and return the remaining arguments in a list.
            </summary>
            <param name="arguments">The command line arguments.</param>
            <param name="remainingArguments">Return value for the arguments remaining after parsing is complete.</param>
        </member>
        <member name="M:NDesk.Options.OptionSet.Parse(System.String[],System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Used to parse the options (aka arguments) denoted by a "-" or "--" in the command line.
            This method also returns the multiple file references denoted by -- &amp;filepattern> in git.
            </summary>
            <param name="arguments">The command line arguments.</param>
            <param name="filePaths">Return value for multiple file references, if specified. Setting the value to null will disable this option.</param>
            <param name="remainingArguments">Return value for the arguments remaining after parsing is complete.</param>
        </member>
        <member name="T:Command">
            Annotation to document a {@link TextBuiltin}.
            
            This is an optional annotation for TextBuiltin subclasses and it carries
            documentation forward into the runtime system describing what the command is
            and why users may want to invoke it.
        </member>
        <member name="T:GitSharp.CLI.CommandCatalog">
            <summary>
             List of all commands known by the command line tools.
             Commands are implementations of the TextBuiltin class, with a required
             command attribute to insert additional documentation and add some extra
             information such as if the command is common and completed.
             
             Commands may be registered by adding them to the Commands.xml file.
             The Commands.xml file should contain:
                 a. The command name including namespace.
                 b. The website address for command specific online help.(optional)
            </summary>
        </member>
        <member name="F:GitSharp.CLI.CommandCatalog.commands">
            <summary>
            Stores the command catalog.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.CommandCatalog.#ctor">
            <summary>
            Creates the command catalog from the Commands.xml file.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.CommandCatalog.StartsWith(System.String)">
            <summary>
            Returns all commands starting with a specified string, sorted by command name.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.CommandCatalog.Load(System.String,System.String)">
            <summary>
            Create and loads the command name into the command catalog.
            </summary>
            <param name="commandName">Specifies the command name to load.</param>
            <param name="commandHelp">Specifies the command's website for faster reference.</param>
        </member>
        <member name="M:GitSharp.CLI.CommandCatalog.Get(System.String)">
            <summary>
            Locates a single command by its user friendly name.
            </summary>
            <param name="name">Specifies the name of the command.</param>
            <returns>Returns the CommandRef containing the command's information.</returns>
        </member>
        <member name="M:GitSharp.CLI.CommandCatalog.All">
            <summary>
            Returns all known commands, sorted by command name.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.CommandCatalog.Common">
            <summary>
            Returns all common commands, sorted by command name.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.CommandCatalog.Incomplete">
            <summary>
            Returns all incomplete commands, sorted by command name.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.CommandCatalog.Complete">
            <summary>
            Returns all complete commands, sorted by command name.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.CommandCatalog.toSortedArray(System.Collections.Generic.List{GitSharp.CLI.CommandRef})">
            <summary>
            Sorts a list of specified commands by command name.
            </summary>
            <param name="c">Specifies the list of commands to be sorted.</param>
            <returns>Returns the sorted list of commands.</returns>
        </member>
        <member name="T:GitSharp.CLI.CommandRef">
             <summary>
             Description of a command subcommand.
            
             These descriptions are lightweight compared to creating a command instance
             and are therefore suitable for catalogs of "known" commands without linking
             the command's implementation and creating a dummy instance of the command.
             </summary>
        </member>
        <member name="M:GitSharp.CLI.CommandRef.getName">
            <summary>
            Returns the friendly command name. The command as invoked from the command line.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.CommandRef.getUsage">
            <summary>
            Returns a one line description of the command's feature set.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.CommandRef.isCommon">
            <summary>
            Returns true if this command is considered to be commonly used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GitSharp.CLI.CommandRef.isComplete">
            <summary>
            Returns true if this command is considered to be completed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GitSharp.CLI.CommandRef.RequiresRepository">
            <summary>
            Returns true if this command requires a repository.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GitSharp.CLI.CommandRef.getImplementationClassName">
            <summary>
            Returns the name of the class which implements this command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GitSharp.CLI.CommandRef.Create">
            <summary>
            Returns a new instance of the command implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GitSharp.CLI.Die">
            <summary>
            Indicates a <see cref="T:GitSharp.CLI.TextBuiltin"/> implementation has failed during execution.
            <para>
            Typically the stack trace for a Die exception is not shown to the user as it
            may indicate a simple error condition that the end-user can fix on their own,
            without needing a screen of stack frames.
            </para>
            </summary>
        </member>
        <member name="M:GitSharp.CLI.Die.#ctor(System.String)">
            <summary>
            Construct a new message explaining what has gone wrong.
            </summary>
            <param name="why">The message to show to the end-user.</param>
        </member>
        <member name="T:GitSharp.CLI.Program">
            <summary>
            Command line entry point.
            </summary>
        </member>
        <member name="F:GitSharp.CLI.Program.showStackTrace">
            <summary>
            Display the stack trace on exceptions
            </summary>
        </member>
        <member name="F:GitSharp.CLI.Program.arguments">
            <summary>
            
            </summary>
        </member>
        <member name="M:GitSharp.CLI.Program.Main(System.String[])">
            <summary>
            Load the parser options and 
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:GitSharp.CLI.Program.execute(System.String[])">
            <summary>
            Execute the command line
            </summary>
            <param name="argv"></param>
        </member>
        <member name="M:GitSharp.CLI.Program.ShowHelp">
            <summary>
            Display the main offline help screen.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.Program.ShowVersion">
            <summary>
            Implementation of --version
            </summary>
        </member>
        <member name="M:GitSharp.CLI.Program.ShowIncomplete">
            <summary>
            Display the incomplete commands in GitSharp. Primarily for development use.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.Program.ShowComplete">
            <summary>
            Display the complete commands in GitSharp.
            </summary>
        </member>
        <member name="M:GitSharp.CLI.Program.ShowCommandMatches(System.String)">
            <summary>
            Display the commands that start with the specified string.
            </summary>
            <param name="s"></param>
            <returns>Returns true if matches exist, otherwise false.</returns>
        </member>
        <member name="M:GitSharp.CLI.Program.Exit(System.Int32)">
            <summary>
            Wait for Enter key if in DEBUG mode
            </summary>
            <param name="exit_code"></param>
        </member>
        <member name="M:GitSharp.CLI.Program.NoOp">
            <summary>
            Placeholder for the --git-dir command-line option. It is handled before it reaches this method.
            </summary>
        </member>
        <member name="T:GitSharp.CLI.UnitTest">
            <summary>
            Description of UnitTest.
            </summary>
        </member>
    </members>
</doc>
