<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StructureMap.AutoMocking</name>
    </assembly>
    <members>
        <member name="M:StructureMap.AutoMocking.IAutoMocker`1.MockObjectFactory">
            <summary>
            Use this with EXTREME caution.  This will replace the active "Container" in accessed
            by ObjectFactory with the AutoMockedContainer from this instance
            </summary>
        </member>
        <member name="M:StructureMap.AutoMocking.IAutoMocker`1.PartialMockTheClassUnderTest">
            <summary>
            Calling this method will immediately create a "Partial" mock
            for the ClassUnderTest using the "Greediest" constructor.
            </summary>
        </member>
        <member name="M:StructureMap.AutoMocking.IAutoMocker`1.Get``1">
            <summary>
            Gets the mock object for type T that would be injected into the constructor function
            of the ClassUnderTest
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StructureMap.AutoMocking.IAutoMocker`1.Inject(System.Type,System.Object)">
            <summary>
            Method to specify the exact object that will be used for 
            "pluginType."  Useful for stub objects and/or static mocks
            </summary>
            <param name="pluginType"></param>
            <param name="stub"></param>
        </member>
        <member name="M:StructureMap.AutoMocking.IAutoMocker`1.Inject``1(``0)">
            <summary>
            Method to specify the exact object that will be used for 
            "pluginType."  Useful for stub objects and/or static mocks
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
        </member>
        <member name="M:StructureMap.AutoMocking.IAutoMocker`1.AddAdditionalMockFor``1">
            <summary>
            Adds an additional mock object for a given T
            Useful for array arguments to the ClassUnderTest
            object
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StructureMap.AutoMocking.IAutoMocker`1.UseConcreteClassFor``1">
            <summary>
            So that Aaron Jensen can use his concrete HubService object
            Construct whatever T is with all mocks, and make sure that the
            ClassUnderTest gets built with a concrete T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:StructureMap.AutoMocking.IAutoMocker`1.CreateMockArrayFor``1(System.Int32)">
            <summary>
            Creates, returns, and registers an array of mock objects for type T.  
            </summary>
            <typeparam name="T"></typeparam>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.AutoMocking.IAutoMocker`1.InjectArray``1(``0[])">
            <summary>
            Allows you to "inject" an array of known objects for an 
            argument of type T[] in the ClassUnderTest
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stubs"></param>
        </member>
        <member name="P:StructureMap.AutoMocking.IAutoMocker`1.ClassUnderTest">
             <summary>
            Gets an instance of the ClassUnderTest with mock objects (or stubs) pushed in for all of its dependencies
             </summary>
        </member>
        <member name="P:StructureMap.AutoMocking.IAutoMocker`1.Container">
            <summary>
            Accesses the underlying AutoMockedContainer
            </summary>
        </member>
        <member name="T:StructureMap.AutoMocking.AutoMocker`1">
            <summary>
            The Auto Mocking Container for StructureMap
            </summary>
            <typeparam name="TARGETCLASS"></typeparam>
        </member>
        <member name="M:StructureMap.AutoMocking.AutoMocker`1.MockObjectFactory">
            <summary>
            Use this with EXTREME caution.  This will replace the active "Container" in accessed
            by ObjectFactory with the AutoMockedContainer from this instance
            </summary>
        </member>
        <member name="M:StructureMap.AutoMocking.AutoMocker`1.PartialMockTheClassUnderTest">
            <summary>
            Calling this method will immediately create a "Partial" mock
            for the ClassUnderTest using the "Greediest" constructor.
            </summary>
        </member>
        <member name="M:StructureMap.AutoMocking.AutoMocker`1.Get``1">
            <summary>
            Gets the mock object for type T that would be injected into the constructor function
            of the ClassUnderTest
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StructureMap.AutoMocking.AutoMocker`1.Inject(System.Type,System.Object)">
            <summary>
            Method to specify the exact object that will be used for 
            "pluginType."  Useful for stub objects and/or static mocks
            </summary>
            <param name="pluginType"></param>
            <param name="stub"></param>
        </member>
        <member name="M:StructureMap.AutoMocking.AutoMocker`1.Inject``1(``0)">
            <summary>
            Method to specify the exact object that will be used for 
            "pluginType."  Useful for stub objects and/or static mocks
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
        </member>
        <member name="M:StructureMap.AutoMocking.AutoMocker`1.AddAdditionalMockFor``1">
            <summary>
            Adds an additional mock object for a given T
            Useful for array arguments to the ClassUnderTest
            object
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StructureMap.AutoMocking.AutoMocker`1.UseConcreteClassFor``1">
            <summary>
            So that Aaron Jensen can use his concrete HubService object
            Construct whatever T is with all mocks, and make sure that the
            ClassUnderTest gets built with a concrete T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:StructureMap.AutoMocking.AutoMocker`1.CreateMockArrayFor``1(System.Int32)">
            <summary>
            Creates, returns, and registers an array of mock objects for type T.  
            </summary>
            <typeparam name="T"></typeparam>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.AutoMocking.AutoMocker`1.InjectArray``1(``0[])">
            <summary>
            Allows you to "inject" an array of known objects for an 
            argument of type T[] in the ClassUnderTest
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stubs"></param>
        </member>
        <member name="P:StructureMap.AutoMocking.AutoMocker`1.ClassUnderTest">
             <summary>
            Gets an instance of the ClassUnderTest with mock objects (or stubs) pushed in for all of its dependencies
             </summary>
        </member>
        <member name="P:StructureMap.AutoMocking.AutoMocker`1.Container">
            <summary>
            Accesses the underlying AutoMockedContainer
            </summary>
        </member>
        <member name="T:StructureMap.AutoMocking.MoqAutoMocker`1">
            <summary>
            Provides an "Auto Mocking Container" for the concrete class TARGETCLASS using Moq
            </summary>
            <typeparam name="TARGETCLASS">The concrete class being tested</typeparam>
        </member>
        <member name="T:StructureMap.AutoMocking.RhinoAutoMocker`1">
            <summary>
            Provides an "Auto Mocking Container" for the concrete class TARGETCLASS using Rhino.Mocks
            </summary>
            <typeparam name="TARGETCLASS">The concrete class being tested</typeparam>
        </member>
    </members>
</doc>
